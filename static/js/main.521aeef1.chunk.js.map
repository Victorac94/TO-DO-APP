{"version":3,"sources":["components/Task/Task.module.css","components/AddTask/AddTask.module.css","components/TasksCompleted/TasksCompleted.module.css","components/Header/Header.module.css","components/Header/Header.js","components/AddTask/AddTask.js","components/Task/Task.js","components/TasksCompleted/TasksCompleted.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","TaskWrapper","deletePostShow","checkbox","Task","TaskSelected","AddTask","AddTask__form","AddTask__button","AddTask__button__vertical","AddTask__button__horizontal","TasksCompleted","TasksCompletedList","taskCompleted","Header","header","props","react_default","a","createElement","className","classes","addTask","onSubmit","onAddTask","type","placeholder","onClick","task","isSelected","taskPressed","handleTaskPress","e","target","currentTarget","span","querySelector","setTimeout","classList","remove","add","handleTaskRelease","clearTimeout","onTouchStart","onTouchEnd","onMouseDown","onMouseUp","data-key","itemId","checked","deleteTask","tasksCompleted","map","t","key","value","deleteTasksCompleted","App","state","tasks","input","document","form","tasksCopy","Object","toConsumableArray","_this","preventDefault","newTask","Math","random","toFixed","push","setState","onTaskChecked","elem","parentElement","dataset","i","findIndex","el","objectSpread","tasksCompCopy","taskDone","splice","apply","deleteCompleted","_this2","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0EACAA,EAAAC,QAAA,CAAkBC,YAAA,0BAAAC,eAAA,6BAAAC,SAAA,uBAAAC,KAAA,mBAAAC,aAAA,6CCAlBN,EAAAC,QAAA,CAAkBM,QAAA,yBAAAC,cAAA,+BAAAC,gBAAA,iCAAAC,0BAAA,2CAAAC,4BAAA,+DCAlBX,EAAAC,QAAA,CAAkBW,eAAA,uCAAAC,mBAAA,2CAAAC,cAAA,+DCAlBd,EAAAC,QAAA,CAAkBc,OAAA,8PCaHC,EAVA,SAACC,GACd,OACEC,EAAAC,EAAAC,cAAA,UAAQC,UAAWC,UACjBJ,EAAAC,EAAAC,cAAA,gCCWSG,EAdC,SAACN,GACf,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,WACdJ,EAAAC,EAAAC,cAAA,QAAMI,SAAUP,EAAMQ,UAAWJ,UAAWC,iBAC1CJ,EAAAC,EAAAC,cAAA,SAAOM,KAAK,OAAOC,YAAY,cAEjCT,EAAAC,EAAAC,cAAA,UAAQQ,QAASX,EAAMQ,UAAWJ,UAAWC,mBAC3CJ,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,8BAChBJ,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,0CCoCTO,EA5CF,SAACZ,GACZ,IAAIa,GAAa,EACbC,EAAc,KAGZC,EAAkB,SAACC,GAEvB,IAAMC,EAASD,EAAEE,cACXC,EAAOF,EAAOG,cAAc,gBAClCN,EAAcO,WAAW,WACnBR,GACFI,EAAOK,UAAUC,OAAOlB,gBACxBc,EAAKG,UAAUC,OAAOlB,kBACtBQ,GAAa,IAEbI,EAAOK,UAAUE,IAAInB,gBACrBc,EAAKG,UAAUE,IAAInB,kBACnBQ,GAAa,IAEd,MAGCY,EAAoB,WACxBC,aAAaZ,IAGf,OACEb,EAAAC,EAAAC,cAAA,OACAC,UAAWC,cACXsB,aAAc,SAACX,GAAD,OAAOD,EAAgBC,IACrCY,WAAYH,EACZI,YAAa,SAACb,GAAD,OAAOD,EAAgBC,IACpCc,UAAWL,EACXM,WAAU/B,EAAMgC,QAEd/B,EAAAC,EAAAC,cAAA,SAAOM,KAAK,WAAWE,QAASX,EAAMiC,QAAS7B,UAAWC,aAC1DJ,EAAAC,EAAAC,cAAA,KAAGC,UAAWC,QACXL,EAAMY,MAETX,EAAAC,EAAAC,cAAA,QAAMQ,QAASX,EAAMkC,WAAY9B,UAAU,sCCflC+B,EAxBQ,SAACnC,GACtB,IAAImC,EAAiB,GAUrB,OARAA,EAAiBnC,EAAMmC,eAAeC,IAAI,SAAAC,GACxC,OACEpC,EAAAC,EAAAC,cAAA,MAAIC,UAAWC,gBAAuBiC,IAAKD,EAAEC,IAAKP,WAAUM,EAAEC,KAC3DD,EAAEE,SAMPtC,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,kBACdJ,EAAAC,EAAAC,cAAA,qBAEEF,EAAAC,EAAAC,cAAA,QAAMQ,QAASX,EAAMwC,qBAAsBpC,UAAU,kBAEvDH,EAAAC,EAAAC,cAAA,MAAIC,UAAWC,sBACZ8B,KCwGMM,6MArHbC,MAAQ,CACNC,MAAO,GACPR,eAAgB,MAGlB7B,QAAU,SAACU,GACT,IAAI4B,EAAQC,SAASzB,cAAc,cAC7B0B,EAAOD,SAASzB,cAAc,QAC9B2B,EAASC,OAAAC,EAAA,EAAAD,CAAOE,EAAKR,MAAMC,OAG7B3B,EAAEC,SAAW6B,GACf9B,EAAEmC,iBAGJ,IAAMZ,EAAQK,EAAML,MACda,EAAU,CAACb,MAASA,EAAOD,IAAOC,EAAQc,KAAKC,SAASC,QAAQ,IAEtER,EAAUS,KAAKJ,GAEfF,EAAKO,SAAS,WACZ,MAAO,CACLd,MAAOI,KAKXF,SAASzB,cAAc,cAAcmB,MAAQ,MAG/CmB,cAAgB,SAAC1C,GACf,IAAM2C,EAAO3C,EAAEC,OAAO2C,cAAcC,QAAQvB,IAE5CjB,WAAW,WAET,IAAMyC,EAAIZ,EAAKR,MAAMC,MAAMoB,UAAU,SAAAC,GACnC,OAAOA,EAAG1B,MAAQqB,IAEdZ,EAAYG,EAAKR,MAAMC,MAAMP,IAAI,SAAAC,GACrC,OAAOW,OAAAiB,EAAA,EAAAjB,CAAA,GAAIX,KAEP6B,EAAgBhB,EAAKR,MAAMP,eAAeC,IAAI,SAAAC,GAClD,OAAOW,OAAAiB,EAAA,EAAAjB,CAAA,GAAIX,KAIP8B,EAAWpB,EAAUqB,OAAON,EAAG,GACrCI,EAAcV,KAAda,MAAAH,EAAalB,OAAAC,EAAA,EAAAD,CAASmB,IAEtBjB,EAAKO,SAAS,WACZ,MAAO,CACLd,MAAOI,EACPZ,eAAgB+B,MAGnB,QAGLhC,WAAa,SAAClB,GAEZ,IAAM2C,EAAO3C,EAAEC,OAAO2C,cAAcC,QAAQvB,IAGtCwB,EAAIZ,EAAKR,MAAMC,MAAMoB,UAAU,SAAAC,GACnC,OAAOA,EAAG1B,MAAQqB,IAIdZ,EAAYG,EAAKR,MAAMC,MAAMP,IAAI,SAAAC,GACrC,OAAOW,OAAAiB,EAAA,EAAAjB,CAAA,GAAIX,KAIbU,EAAUqB,OAAON,EAAG,GAGpBZ,EAAKO,SAAS,WACZ,MAAM,CACJd,MAAOI,QAKbuB,gBAAkB,WAChBpB,EAAKO,SAAS,WACZ,MAAO,CACLtB,eAAgB,+EAKb,IACHQ,EADG4B,EAAAC,KAaP,OAVA7B,EAAQ6B,KAAK9B,MAAMC,MAAMP,IAAI,SAACC,EAAGyB,GAC/B,OACE7D,EAAAC,EAAAC,cAACf,EAAD,CACAkD,IAAKD,EAAEC,IAAMwB,EACb9B,OAAQK,EAAEC,IACV1B,KAAMyB,EAAEE,MACRN,QAAS,SAACjB,GAAD,OAAOuD,EAAKb,cAAc1C,IACnCkB,WAAY,SAAClB,GAAD,OAAOuD,EAAKrC,WAAWlB,QAIrCf,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACL,EAAD,MACAG,EAAAC,EAAAC,cAACb,EAAD,CAASkB,UAAW,SAACQ,GAAD,OAAOuD,EAAKjE,QAAQU,MACvC2B,EACD1C,EAAAC,EAAAC,cAACR,EAAD,CACAwC,eAAgBqC,KAAK9B,MAAMP,eAC3BK,qBAAsBgC,KAAKF,0BAhHjBG,aCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO/E,EAAAC,EAAAC,cAAC8E,EAAD,MAASpC,SAASqC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.521aeef1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"TaskWrapper\":\"Task_TaskWrapper__2Uahb\",\"deletePostShow\":\"Task_deletePostShow__2kQl_\",\"checkbox\":\"Task_checkbox__1JUXe\",\"Task\":\"Task_Task__1NYut\",\"TaskSelected\":\"Task_TaskSelected__2PlgB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"AddTask\":\"AddTask_AddTask__cu_2s\",\"AddTask__form\":\"AddTask_AddTask__form__2jr07\",\"AddTask__button\":\"AddTask_AddTask__button__Ag9y8\",\"AddTask__button__vertical\":\"AddTask_AddTask__button__vertical__2CSBe\",\"AddTask__button__horizontal\":\"AddTask_AddTask__button__horizontal__AI6Z8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"TasksCompleted\":\"TasksCompleted_TasksCompleted__2a5K0\",\"TasksCompletedList\":\"TasksCompleted_TasksCompletedList__2QxaN\",\"taskCompleted\":\"TasksCompleted_taskCompleted__1NU_0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Header\":\"Header_Header__1_axp\"};","import React from 'react';\r\n\r\nimport * as classes from './Header.module.css';\r\n\r\nconst header = (props) => {\r\n  return (\r\n    <header className={classes.Header}>\r\n      <p>\r\n        TO-DO List\r\n      </p>\r\n    </header>\r\n  )\r\n}\r\n\r\nexport default header;\r\n","import React from 'react';\r\n\r\nimport * as classes from './AddTask.module.css';\r\n\r\nconst addTask = (props) => {\r\n  return (\r\n    <div className={classes.AddTask}>\r\n      <form onSubmit={props.onAddTask} className={classes.AddTask__form}>\r\n        <input type=\"text\" placeholder=\"Add task\" />\r\n      </form>\r\n      <button onClick={props.onAddTask} className={classes.AddTask__button}>\r\n        <div className={classes.AddTask__button__vertical}></div>\r\n        <div className={classes.AddTask__button__horizontal}></div>\r\n      </button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default addTask;\r\n","import React from 'react';\r\n\r\nimport * as classes from './Task.module.css';\r\n\r\nconst task = (props) => {\r\n  let isSelected = false;\r\n  let taskPressed = null;\r\n  // const span = document.querySelector(\".delete-post\");\r\n\r\n  const handleTaskPress = (e) => {\r\n    //We use 'currentTarget' instead of 'target' because we want to select the parent Div\r\n    const target = e.currentTarget;\r\n    const span = target.querySelector(\".delete-post\");\r\n    taskPressed = setTimeout(() => {\r\n      if (isSelected) {\r\n        target.classList.remove(classes.TaskSelected);\r\n        span.classList.remove(classes.deletePostShow);\r\n        isSelected = false;\r\n      } else {\r\n        target.classList.add(classes.TaskSelected);\r\n        span.classList.add(classes.deletePostShow);\r\n        isSelected = true;\r\n      }\r\n    }, 300) //300 milliseconds\r\n  }\r\n\r\n  const handleTaskRelease = () => {\r\n    clearTimeout(taskPressed);\r\n  }\r\n\r\n  return (\r\n    <div\r\n    className={classes.TaskWrapper}\r\n    onTouchStart={(e) => handleTaskPress(e)}\r\n    onTouchEnd={handleTaskRelease}\r\n    onMouseDown={(e) => handleTaskPress(e)}\r\n    onMouseUp={handleTaskRelease}\r\n    data-key={props.itemId}\r\n    >\r\n      <input type=\"checkbox\" onClick={props.checked} className={classes.checkbox}/>\r\n      <p className={classes.Task}>\r\n        {props.task}\r\n      </p>\r\n      <span onClick={props.deleteTask} className=\"icon-trash-o delete-post\"></span>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default task;\r\n","import React from 'react';\r\n\r\nimport * as classes from './TasksCompleted.module.css';\r\n\r\nconst tasksCompleted = (props) => {\r\n  let tasksCompleted = [];\r\n\r\n  tasksCompleted = props.tasksCompleted.map(t => {\r\n    return (\r\n      <li className={classes.taskCompleted} key={t.key} data-key={t.key}>\r\n        {t.value}\r\n      </li>\r\n    )\r\n  });\r\n\r\n  return (\r\n    <div className={classes.TasksCompleted}>\r\n      <p>\r\n        Completed\r\n        <span onClick={props.deleteTasksCompleted} className=\"icon-trash-o\"></span>\r\n      </p>\r\n      <ul className={classes.TasksCompletedList}>\r\n        {tasksCompleted}\r\n      </ul>\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default tasksCompleted;\r\n","import React, { Component } from 'react';\n\nimport './App.css';\nimport Header from './components/Header/Header';\nimport AddTask from './components/AddTask/AddTask';\nimport Task from './components/Task/Task';\nimport TasksCompleted from './components/TasksCompleted/TasksCompleted';\n\nclass App extends Component {\n  state = {\n    tasks: [],\n    tasksCompleted: []\n  }\n\n  addTask = (e) => {\n    let input = document.querySelector(\"form input\");\n    const form = document.querySelector(\"form\");\n    const tasksCopy = [...this.state.tasks];\n\n    //Prevent 'sending' the form\n    if (e.target === form) {\n      e.preventDefault();\n    }\n    //Get the input value and create the new task\n    const value = input.value;\n    const newTask = {\"value\": value, \"key\": value + Math.random().toFixed(4)};\n    //Add task to state array\n    tasksCopy.push(newTask);\n\n    this.setState(() => {\n      return {\n        tasks: tasksCopy\n      }\n    });\n\n    //Reset the input value to an empty string\n    document.querySelector(\"form input\").value = \"\";\n  }\n\n  onTaskChecked = (e) => {\n    const elem = e.target.parentElement.dataset.key;\n\n    setTimeout(() => {\n      //Get the index of the task in the State's array\n      const i = this.state.tasks.findIndex(el => {\n        return el.key === elem;\n      });\n      const tasksCopy = this.state.tasks.map(t => {\n        return {...t};\n      });\n      const tasksCompCopy = this.state.tasksCompleted.map(t => {\n        return {...t};\n      });\n\n      //Eliminate the desired task from the State's array copy and add it to the TasksCompleted copy\n      const taskDone = tasksCopy.splice(i, 1);\n      tasksCompCopy.push(...taskDone);\n\n      this.setState(() => {\n        return {\n          tasks: tasksCopy,\n          tasksCompleted: tasksCompCopy\n        };\n      });\n    }, 100);\n  }\n\n  deleteTask = (e) => {\n    //Select the key of the target task\n    const elem = e.target.parentElement.dataset.key;\n\n    //Get the index of that task in the state\n    const i = this.state.tasks.findIndex(el => {\n      return el.key === elem;\n    });\n\n    //Make a deep copy of the tasks in state\n    const tasksCopy = this.state.tasks.map(t => {\n      return {...t};\n    });\n\n    //Remove the target task of the tasks copy\n    tasksCopy.splice(i, 1);\n\n    //Set the new state\n    this.setState(() => {\n      return{\n        tasks: tasksCopy\n      }\n    });\n  }\n\n  deleteCompleted = () => {\n    this.setState(() => {\n      return {\n        tasksCompleted: []\n      }\n    })\n  }\n\n  render() {\n    let tasks = [];\n\n    tasks = this.state.tasks.map((t, i) => {\n      return (\n        <Task\n        key={t.key + i}\n        itemId={t.key}\n        task={t.value}\n        checked={(e) => this.onTaskChecked(e)}\n        deleteTask={(e) => this.deleteTask(e)}/>\n      );\n    });\n    return (\n      <div className=\"App\">\n        <Header />\n        <AddTask onAddTask={(e) => this.addTask(e)}/>\n        {tasks}\n        <TasksCompleted\n        tasksCompleted={this.state.tasksCompleted}\n        deleteTasksCompleted={this.deleteCompleted}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}